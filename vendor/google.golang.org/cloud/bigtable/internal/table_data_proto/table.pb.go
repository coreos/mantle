// Code generated by protoc-gen-go.
// source: google.golang.org/cloud/bigtable/internal/table_data_proto/table.proto
// DO NOT EDIT!

/*
Package google_bigtable_admin_v2 is a generated protocol buffer package.

It is generated from these files:
	google.golang.org/cloud/bigtable/internal/table_data_proto/table.proto

It has these top-level messages:
	Table
	ColumnFamily
	GcRule
*/
package google_bigtable_admin_v2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Table_TimestampGranularity int32

const (
	Table_TIMESTAMP_GRANULARITY_UNSPECIFIED Table_TimestampGranularity = 0
	Table_MILLIS                            Table_TimestampGranularity = 1
)

var Table_TimestampGranularity_name = map[int32]string{
	0: "TIMESTAMP_GRANULARITY_UNSPECIFIED",
	1: "MILLIS",
}
var Table_TimestampGranularity_value = map[string]int32{
	"TIMESTAMP_GRANULARITY_UNSPECIFIED": 0,
	"MILLIS": 1,
}

func (x Table_TimestampGranularity) String() string {
	return proto.EnumName(Table_TimestampGranularity_name, int32(x))
}
func (Table_TimestampGranularity) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

// Defines a view over a table's fields.
type Table_View int32

const (
	// Uses the default view for each method as documented in its request.
	Table_VIEW_UNSPECIFIED Table_View = 0
	// Only populates `name`.
	Table_NAME_ONLY Table_View = 1
	// Only populates `name` and fields related to the table's schema.
	Table_SCHEMA_VIEW Table_View = 2
	// Only populates `name` and fields related to the table's
	// replication state.
	Table_REPLICATION_VIEW Table_View = 3
	// Populates all fields.
	Table_FULL Table_View = 4
)

var Table_View_name = map[int32]string{
	0: "VIEW_UNSPECIFIED",
	1: "NAME_ONLY",
	2: "SCHEMA_VIEW",
	3: "REPLICATION_VIEW",
	4: "FULL",
}
var Table_View_value = map[string]int32{
	"VIEW_UNSPECIFIED": 0,
	"NAME_ONLY":        1,
	"SCHEMA_VIEW":      2,
	"REPLICATION_VIEW": 3,
	"FULL":             4,
}

func (x Table_View) String() string {
	return proto.EnumName(Table_View_name, int32(x))
}
func (Table_View) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

type Table_ClusterState_ReplicationState int32

const (
	// The replication state of the table is unknown in this cluster.
	Table_ClusterState_STATE_NOT_KNOWN Table_ClusterState_ReplicationState = 0
	// The cluster was recently created, and the table must finish copying
	// over pre-existing data from other clusters before it can begin
	// receiving live replication updates and serving
	// [Data API][google.bigtable.v2.BigtableService] requests.
	Table_ClusterState_INITIALIZING Table_ClusterState_ReplicationState = 1
	// The table is temporarily unable to serve
	// [Data API][google.bigtable.v2.BigtableService] requests from this
	// cluster due to planned internal maintenance.
	Table_ClusterState_PLANNED_MAINTENANCE Table_ClusterState_ReplicationState = 2
	// The table is temporarily unable to serve
	// [Data API][google.bigtable.v2.BigtableService] requests from this
	// cluster due to unplanned or emergency maintenance.
	Table_ClusterState_UNPLANNED_MAINTENANCE Table_ClusterState_ReplicationState = 3
	// The table can serve
	// [Data API][google.bigtable.v2.BigtableService] requests from this
	// cluster. Depending on replication delay, reads may not immediately
	// reflect the state of the table in other clusters.
	Table_ClusterState_READY Table_ClusterState_ReplicationState = 4
)

var Table_ClusterState_ReplicationState_name = map[int32]string{
	0: "STATE_NOT_KNOWN",
	1: "INITIALIZING",
	2: "PLANNED_MAINTENANCE",
	3: "UNPLANNED_MAINTENANCE",
	4: "READY",
}
var Table_ClusterState_ReplicationState_value = map[string]int32{
	"STATE_NOT_KNOWN":       0,
	"INITIALIZING":          1,
	"PLANNED_MAINTENANCE":   2,
	"UNPLANNED_MAINTENANCE": 3,
	"READY":                 4,
}

func (x Table_ClusterState_ReplicationState) String() string {
	return proto.EnumName(Table_ClusterState_ReplicationState_name, int32(x))
}
func (Table_ClusterState_ReplicationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0, 0}
}

// A collection of user data indexed by row, column, and timestamp.
// Each table is served using the resources of its parent cluster.
type Table struct {
	// The unique name of the table. Values are of the form
	// projects/<project>/instances/<instance>/tables/[_a-zA-Z0-9][-_.a-zA-Z0-9]*
	// Views: NAME_ONLY, SCHEMA_VIEW, REPLICATION_VIEW, FULL
	// @OutputOnly
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Map from cluster ID to per-cluster table state.
	// If it could not be determined whether or not the table has data in a
	// particular cluster (for example, if its zone is unavailable), then
	// there will be an entry for the cluster with UNKNOWN `replication_status`.
	// Views: REPLICATION_VIEW, FULL
	// @OutputOnly
	ClusterStates map[string]*Table_ClusterState `protobuf:"bytes,2,rep,name=cluster_states,json=clusterStates" json:"cluster_states,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The column families configured for this table, mapped by column family ID.
	// Views: SCHEMA_VIEW, FULL
	// @CreationOnly
	ColumnFamilies map[string]*ColumnFamily `protobuf:"bytes,3,rep,name=column_families,json=columnFamilies" json:"column_families,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The granularity (e.g. MILLIS, MICROS) at which timestamps are stored in
	// this table. Timestamps not matching the granularity will be rejected.
	// If unspecified at creation time, the value will be set to MILLIS.
	// Views: SCHEMA_VIEW, FULL
	// @CreationOnly
	Granularity Table_TimestampGranularity `protobuf:"varint,4,opt,name=granularity,enum=google.bigtable.admin.v2.Table_TimestampGranularity" json:"granularity,omitempty"`
}

func (m *Table) Reset()                    { *m = Table{} }
func (m *Table) String() string            { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()               {}
func (*Table) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Table) GetClusterStates() map[string]*Table_ClusterState {
	if m != nil {
		return m.ClusterStates
	}
	return nil
}

func (m *Table) GetColumnFamilies() map[string]*ColumnFamily {
	if m != nil {
		return m.ColumnFamilies
	}
	return nil
}

// The state of a table's data in a particular cluster.
type Table_ClusterState struct {
	// The state of replication for the table in this cluster.
	// @OutputOnly
	ReplicationState Table_ClusterState_ReplicationState `protobuf:"varint,1,opt,name=replication_state,json=replicationState,enum=google.bigtable.admin.v2.Table_ClusterState_ReplicationState" json:"replication_state,omitempty"`
}

func (m *Table_ClusterState) Reset()                    { *m = Table_ClusterState{} }
func (m *Table_ClusterState) String() string            { return proto.CompactTextString(m) }
func (*Table_ClusterState) ProtoMessage()               {}
func (*Table_ClusterState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// A set of columns within a table which share a common configuration.
type ColumnFamily struct {
	// Garbage collection rule specified as a protobuf.
	// Must serialize to at most 500 bytes.
	//
	// NOTE: Garbage collection executes opportunistically in the background, and
	// so it's possible for reads to return a cell even if it matches the active
	// GC expression for its family.
	GcRule *GcRule `protobuf:"bytes,1,opt,name=gc_rule,json=gcRule" json:"gc_rule,omitempty"`
}

func (m *ColumnFamily) Reset()                    { *m = ColumnFamily{} }
func (m *ColumnFamily) String() string            { return proto.CompactTextString(m) }
func (*ColumnFamily) ProtoMessage()               {}
func (*ColumnFamily) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ColumnFamily) GetGcRule() *GcRule {
	if m != nil {
		return m.GcRule
	}
	return nil
}

// Rule for determining which cells to delete during garbage collection.
type GcRule struct {
	// Types that are valid to be assigned to Rule:
	//	*GcRule_MaxNumVersions
	//	*GcRule_MaxAge
	//	*GcRule_Intersection_
	//	*GcRule_Union_
	Rule isGcRule_Rule `protobuf_oneof:"rule"`
}

func (m *GcRule) Reset()                    { *m = GcRule{} }
func (m *GcRule) String() string            { return proto.CompactTextString(m) }
func (*GcRule) ProtoMessage()               {}
func (*GcRule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isGcRule_Rule interface {
	isGcRule_Rule()
}

type GcRule_MaxNumVersions struct {
	MaxNumVersions int32 `protobuf:"varint,1,opt,name=max_num_versions,json=maxNumVersions,oneof"`
}
type GcRule_MaxAge struct {
	MaxAge *google_protobuf.Duration `protobuf:"bytes,2,opt,name=max_age,json=maxAge,oneof"`
}
type GcRule_Intersection_ struct {
	Intersection *GcRule_Intersection `protobuf:"bytes,3,opt,name=intersection,oneof"`
}
type GcRule_Union_ struct {
	Union *GcRule_Union `protobuf:"bytes,4,opt,name=union,oneof"`
}

func (*GcRule_MaxNumVersions) isGcRule_Rule() {}
func (*GcRule_MaxAge) isGcRule_Rule()         {}
func (*GcRule_Intersection_) isGcRule_Rule()  {}
func (*GcRule_Union_) isGcRule_Rule()         {}

func (m *GcRule) GetRule() isGcRule_Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *GcRule) GetMaxNumVersions() int32 {
	if x, ok := m.GetRule().(*GcRule_MaxNumVersions); ok {
		return x.MaxNumVersions
	}
	return 0
}

func (m *GcRule) GetMaxAge() *google_protobuf.Duration {
	if x, ok := m.GetRule().(*GcRule_MaxAge); ok {
		return x.MaxAge
	}
	return nil
}

func (m *GcRule) GetIntersection() *GcRule_Intersection {
	if x, ok := m.GetRule().(*GcRule_Intersection_); ok {
		return x.Intersection
	}
	return nil
}

func (m *GcRule) GetUnion() *GcRule_Union {
	if x, ok := m.GetRule().(*GcRule_Union_); ok {
		return x.Union
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GcRule) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GcRule_OneofMarshaler, _GcRule_OneofUnmarshaler, _GcRule_OneofSizer, []interface{}{
		(*GcRule_MaxNumVersions)(nil),
		(*GcRule_MaxAge)(nil),
		(*GcRule_Intersection_)(nil),
		(*GcRule_Union_)(nil),
	}
}

func _GcRule_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GcRule)
	// rule
	switch x := m.Rule.(type) {
	case *GcRule_MaxNumVersions:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.MaxNumVersions))
	case *GcRule_MaxAge:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MaxAge); err != nil {
			return err
		}
	case *GcRule_Intersection_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Intersection); err != nil {
			return err
		}
	case *GcRule_Union_:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Union); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("GcRule.Rule has unexpected type %T", x)
	}
	return nil
}

func _GcRule_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GcRule)
	switch tag {
	case 1: // rule.max_num_versions
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Rule = &GcRule_MaxNumVersions{int32(x)}
		return true, err
	case 2: // rule.max_age
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Duration)
		err := b.DecodeMessage(msg)
		m.Rule = &GcRule_MaxAge{msg}
		return true, err
	case 3: // rule.intersection
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GcRule_Intersection)
		err := b.DecodeMessage(msg)
		m.Rule = &GcRule_Intersection_{msg}
		return true, err
	case 4: // rule.union
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GcRule_Union)
		err := b.DecodeMessage(msg)
		m.Rule = &GcRule_Union_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _GcRule_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GcRule)
	// rule
	switch x := m.Rule.(type) {
	case *GcRule_MaxNumVersions:
		n += proto.SizeVarint(1<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.MaxNumVersions))
	case *GcRule_MaxAge:
		s := proto.Size(x.MaxAge)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GcRule_Intersection_:
		s := proto.Size(x.Intersection)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GcRule_Union_:
		s := proto.Size(x.Union)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// A GcRule which deletes cells matching all of the given rules.
type GcRule_Intersection struct {
	// Only delete cells which would be deleted by every element of `rules`.
	Rules []*GcRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *GcRule_Intersection) Reset()                    { *m = GcRule_Intersection{} }
func (m *GcRule_Intersection) String() string            { return proto.CompactTextString(m) }
func (*GcRule_Intersection) ProtoMessage()               {}
func (*GcRule_Intersection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *GcRule_Intersection) GetRules() []*GcRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

// A GcRule which deletes cells matching any of the given rules.
type GcRule_Union struct {
	// Delete cells which would be deleted by any element of `rules`.
	Rules []*GcRule `protobuf:"bytes,1,rep,name=rules" json:"rules,omitempty"`
}

func (m *GcRule_Union) Reset()                    { *m = GcRule_Union{} }
func (m *GcRule_Union) String() string            { return proto.CompactTextString(m) }
func (*GcRule_Union) ProtoMessage()               {}
func (*GcRule_Union) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *GcRule_Union) GetRules() []*GcRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func init() {
	proto.RegisterType((*Table)(nil), "google.bigtable.admin.v2.Table")
	proto.RegisterType((*Table_ClusterState)(nil), "google.bigtable.admin.v2.Table.ClusterState")
	proto.RegisterType((*ColumnFamily)(nil), "google.bigtable.admin.v2.ColumnFamily")
	proto.RegisterType((*GcRule)(nil), "google.bigtable.admin.v2.GcRule")
	proto.RegisterType((*GcRule_Intersection)(nil), "google.bigtable.admin.v2.GcRule.Intersection")
	proto.RegisterType((*GcRule_Union)(nil), "google.bigtable.admin.v2.GcRule.Union")
	proto.RegisterEnum("google.bigtable.admin.v2.Table_TimestampGranularity", Table_TimestampGranularity_name, Table_TimestampGranularity_value)
	proto.RegisterEnum("google.bigtable.admin.v2.Table_View", Table_View_name, Table_View_value)
	proto.RegisterEnum("google.bigtable.admin.v2.Table_ClusterState_ReplicationState", Table_ClusterState_ReplicationState_name, Table_ClusterState_ReplicationState_value)
}

func init() {
	proto.RegisterFile("google.golang.org/cloud/bigtable/internal/table_data_proto/table.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 741 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x94, 0xff, 0x6e, 0xe2, 0x46,
	0x10, 0xc7, 0xe3, 0x60, 0x48, 0x33, 0x10, 0xe2, 0x6e, 0x52, 0x95, 0xa0, 0xaa, 0x4a, 0x91, 0x5a,
	0x45, 0x55, 0x6a, 0x24, 0x12, 0x55, 0x6d, 0xd5, 0xf6, 0x64, 0xc0, 0x90, 0xd5, 0x99, 0x05, 0x19,
	0x43, 0xc4, 0x29, 0x92, 0x65, 0x8c, 0x63, 0xf9, 0xce, 0x3f, 0x22, 0x63, 0xe7, 0xc2, 0x5b, 0xdc,
	0x5b, 0xdc, 0x0b, 0xde, 0x03, 0xdc, 0x7a, 0x0d, 0x8a, 0x93, 0x03, 0x71, 0xb9, 0xbf, 0x58, 0x66,
	0xe7, 0xfb, 0x19, 0xcf, 0x77, 0x76, 0x17, 0x3a, 0x76, 0x10, 0xd8, 0xae, 0x25, 0xda, 0x81, 0x6b,
	0xf8, 0xb6, 0x18, 0x84, 0x76, 0xdd, 0x74, 0x83, 0x78, 0x56, 0x9f, 0x3a, 0x76, 0x64, 0x4c, 0x5d,
	0xab, 0xee, 0xf8, 0x91, 0x15, 0xfa, 0x86, 0x5b, 0x67, 0x7f, 0xf5, 0x99, 0x11, 0x19, 0xfa, 0x5d,
	0x18, 0x44, 0x41, 0x1a, 0x10, 0xd9, 0x1a, 0x55, 0x96, 0x9c, 0x95, 0x4c, 0x34, 0x66, 0x9e, 0xe3,
	0x8b, 0xf7, 0x8d, 0xea, 0xcf, 0xe9, 0x4e, 0x9d, 0xe5, 0x4d, 0xe3, 0xdb, 0xfa, 0x2c, 0x0e, 0x8d,
	0xc8, 0x09, 0xfc, 0x54, 0x59, 0xfb, 0xb8, 0x07, 0x79, 0x2d, 0x91, 0x20, 0x04, 0xbc, 0x6f, 0x78,
	0x56, 0x85, 0x3b, 0xe5, 0xce, 0xf6, 0x55, 0xb6, 0x46, 0x13, 0x28, 0x9b, 0x6e, 0x3c, 0xa7, 0x9f,
	0xa0, 0xcf, 0x23, 0x23, 0xb2, 0xe6, 0x95, 0xdd, 0xd3, 0xdc, 0x59, 0xb1, 0xd1, 0x10, 0x37, 0x15,
	0x14, 0x19, 0x4c, 0x6c, 0xa5, 0xaa, 0x21, 0x13, 0xc9, 0x7e, 0x14, 0x2e, 0xd4, 0x03, 0x33, 0x1b,
	0x43, 0x37, 0x70, 0x68, 0x06, 0x6e, 0xec, 0xf9, 0xfa, 0xad, 0xe1, 0x39, 0xae, 0x43, 0xd9, 0x39,
	0xc6, 0xbe, 0xd8, 0xca, 0x66, 0xb2, 0xce, 0x52, 0x95, 0xc2, 0xcb, 0xe6, 0x93, 0x20, 0x1a, 0x43,
	0xd1, 0x0e, 0x0d, 0x3f, 0x76, 0x8d, 0xd0, 0x89, 0x16, 0x15, 0x9e, 0xf6, 0x54, 0x6e, 0x5c, 0x6e,
	0x23, 0x6b, 0x8e, 0x67, 0xd1, 0x3e, 0xbd, 0xbb, 0xee, 0xa3, 0x56, 0xcd, 0x82, 0xaa, 0x9f, 0x38,
	0x28, 0x65, 0x7b, 0x43, 0x6f, 0xe1, 0xfb, 0xd0, 0xba, 0x73, 0x1d, 0x93, 0x99, 0x9a, 0xba, 0xc4,
	0x2c, 0x2c, 0x37, 0xfe, 0x7b, 0x89, 0x49, 0xa2, 0xfa, 0x48, 0x61, 0x01, 0x55, 0x08, 0x9f, 0x45,
	0x6a, 0x0f, 0x20, 0x3c, 0xcf, 0x42, 0x47, 0x70, 0x38, 0xd4, 0x24, 0x4d, 0xd6, 0x49, 0x5f, 0xd3,
	0x5f, 0x93, 0xfe, 0x35, 0x11, 0x76, 0x90, 0x00, 0x25, 0x4c, 0xb0, 0x86, 0x25, 0x05, 0xbf, 0xc1,
	0xa4, 0x2b, 0x70, 0xe8, 0x47, 0x38, 0x1a, 0x28, 0x12, 0x21, 0x72, 0x5b, 0xef, 0x49, 0x98, 0x68,
	0x32, 0x91, 0x48, 0x4b, 0x16, 0x76, 0xd1, 0x09, 0xfc, 0x30, 0x22, 0xeb, 0xb6, 0x72, 0x68, 0x1f,
	0xf2, 0xaa, 0x2c, 0xb5, 0x27, 0x02, 0x5f, 0xf5, 0x01, 0x7d, 0x39, 0x51, 0x5a, 0x26, 0xf7, 0xce,
	0x5a, 0x2c, 0x0f, 0x4c, 0xb2, 0x44, 0x4d, 0xc8, 0xdf, 0x1b, 0x6e, 0x6c, 0xd1, 0x63, 0xc2, 0xd1,
	0x51, 0x9e, 0xbf, 0xc4, 0x01, 0x35, 0x95, 0xfe, 0xb3, 0xfb, 0x17, 0x57, 0x75, 0xe0, 0x68, 0xcd,
	0x94, 0xd7, 0x14, 0xfc, 0xf7, 0x69, 0xc1, 0xdf, 0x36, 0x17, 0xcc, 0xf0, 0x16, 0x99, 0x52, 0x35,
	0x0c, 0xc7, 0xeb, 0xc6, 0x8e, 0x7e, 0x85, 0x5f, 0x34, 0xdc, 0x93, 0xa9, 0xb9, 0xbd, 0x81, 0xde,
	0x55, 0x25, 0x32, 0x52, 0x24, 0x15, 0x6b, 0x13, 0x7d, 0x44, 0x86, 0x03, 0xb9, 0x85, 0x3b, 0x58,
	0x6e, 0x53, 0xab, 0x01, 0x0a, 0x3d, 0xac, 0x28, 0x78, 0x28, 0x70, 0xb5, 0x1b, 0xe0, 0xc7, 0x8e,
	0xf5, 0x1e, 0x1d, 0x83, 0x30, 0xc6, 0xf2, 0xf5, 0xb3, 0xcc, 0x03, 0xd8, 0x27, 0x52, 0x4f, 0xd6,
	0xfb, 0x44, 0x99, 0xd0, 0x89, 0x1c, 0x42, 0x71, 0xd8, 0xba, 0x92, 0x7b, 0x92, 0x9e, 0xe4, 0xd2,
	0x49, 0x50, 0x95, 0x2a, 0x0f, 0x14, 0xdc, 0x92, 0x34, 0xdc, 0x27, 0x69, 0x34, 0x87, 0xbe, 0x03,
	0xbe, 0x33, 0x52, 0x14, 0x81, 0xa7, 0x1f, 0x5a, 0xca, 0xf6, 0x80, 0xfe, 0x86, 0x3d, 0xdb, 0xd4,
	0xc3, 0xd8, 0x4d, 0xcf, 0x5b, 0xb1, 0x71, 0xba, 0xb9, 0xf9, 0xae, 0xa9, 0xd2, 0x3c, 0xb5, 0x60,
	0xb3, 0xdf, 0xda, 0x87, 0x1c, 0x14, 0xd2, 0x10, 0xfa, 0x1d, 0x04, 0xcf, 0x78, 0xd0, 0xfd, 0xd8,
	0xd3, 0xef, 0xad, 0x70, 0x4e, 0xcf, 0xd5, 0x9c, 0xe1, 0xf2, 0x57, 0x3b, 0x6a, 0x99, 0xee, 0x90,
	0xd8, 0x1b, 0x2f, 0xe3, 0xe8, 0x12, 0xf6, 0x92, 0x5c, 0xc3, 0x5e, 0xd9, 0x7d, 0xb2, 0xaa, 0xb8,
	0x7a, 0x5d, 0xc4, 0xf6, 0xf2, 0x75, 0xa1, 0xea, 0x02, 0xcd, 0x95, 0x6c, 0x0b, 0x0d, 0xa1, 0xc4,
	0x1e, 0xb1, 0xb9, 0x65, 0x26, 0x3b, 0xf4, 0x96, 0x27, 0xd2, 0x3f, 0xb6, 0x7d, 0xac, 0x88, 0x33,
	0x22, 0x8a, 0x7b, 0x02, 0x41, 0xff, 0x43, 0x3e, 0xf6, 0x13, 0x1a, 0xbf, 0x6d, 0xee, 0x4b, 0xda,
	0xc8, 0x4f, 0x31, 0xa9, 0xac, 0xda, 0xa1, 0x37, 0x24, 0xcb, 0xfb, 0x13, 0xf2, 0x89, 0x93, 0x49,
	0xef, 0xb9, 0xaf, 0xb2, 0x32, 0x4d, 0xaf, 0xbe, 0x82, 0x3c, 0x23, 0x7f, 0x2b, 0xa0, 0x59, 0x00,
	0x3e, 0x59, 0x34, 0xcf, 0xe1, 0x27, 0x33, 0xf0, 0x36, 0xaa, 0x9a, 0xc0, 0x2e, 0xcc, 0x20, 0xf1,
	0x79, 0xc0, 0x4d, 0x0b, 0xcc, 0xf0, 0x8b, 0xcf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x53, 0x56, 0x14,
	0x32, 0x40, 0x06, 0x00, 0x00,
}
