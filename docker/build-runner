#!/usr/bin/env bash

set -e

get_version () {
	local version=$(git describe --dirty)
	version="${version#v}"
	echo "${version}"
}

goarch() {
	local m="$(uname -m)"

	case "${m}" in
		aarch64) echo "arm64" ;;
		x86_64)  echo "amd64" ;;
		*)       echo "${m}" ;;
	esac
}

arch_tag() {
	local a="$(goarch)"

	case "${a}" in
		amd64) echo "" ;;
		*)     echo "-${a}" ;;
	esac
}

: ${TOP_DIR:="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"}
: ${VERSION:="$(get_version)"}
: ${ARCH_TAG:="$(arch_tag)"}
: ${DOCKER_NAME:="mantle-runner"}
: ${DOCKER_TAG:="${DOCKER_NAME}:${VERSION}${ARCH_TAG}"}
: ${DOCKER_FILE:="${TOP_DIR}/docker/Dockerfile.runner.$(goarch)"}

show_tag () {
	echo "${DOCKER_TAG}"
}


usage () {
	echo "$(basename $0) - Builds a docker image that containes the mantle programs." >&2
	echo "Usage: $(basename $0) [flags]" >&2
	echo "Option flags:" >&2
	echo "  -d --dry-run  - Do not run docker commands." >&2
	echo "  -h --help     - Show this help and exit." >&2
	echo "  -p --purge    - Remove existing docker image and rebuild." >&2
	echo "  -r --rebuild  - Rebuild existing docker image." >&2
	echo "  -s --script   - Only generate run-mantle helper script." >&2
	echo "  -t --tag      - Print docker tag to stdout and exit." >&2
	echo "  -v --verbose  - Verbose execution." >&2
	echo "Environment:" >&2
	echo "  DOCKER_FILE   - Default: '${DOCKER_FILE}'" >&2
	echo "  DOCKER_TAG    - Default: '${DOCKER_TAG}'" >&2
}

short_opts="dhprstv"
long_opts="dry-run,help,purge,rebuild,script,tag,verbose"

opts=$(getopt --options ${short_opts} --long ${long_opts} -n "${name}" -- "$@")

if [ $? != 0 ]; then
	echo "${name}: Terminating..." >&2 
	exit 1
fi

eval set -- "${opts}"

while true ; do
	case "${1}" in
	-d | --dry-run)
		dry_run="--dry-run"
		shift
		;;
	-h | --help)
		usage
		exit 0
		;;
	-p | --purge)
		purge=1
		shift
		;;
	-r | --rebuild)
		rebuild=1
		shift
		;;
	-s | --script)
		script=1
		shift
		;;
	-t | --tag)
		show_tag
		exit 0
		;;
	-v | --verbose)
		set -x
		shift
		;;
	--)
		shift
		break
		;;
	*)
		echo "Error: Unknown option '${1}'." >&2
		usage
		exit 1
		;;
	esac
done

if [[ -n "${purge}" ]] && docker inspect --type image ${DOCKER_TAG} >/dev/null 2>/dev/null; then
	echo "Removing docker image: ${DOCKER_TAG}" >&2
	[[ -n ${dry_run} ]] || docker rmi --force ${DOCKER_TAG}
elif [[ -z "${rebuild}" ]] && docker inspect --type image ${DOCKER_TAG} >/dev/null 2>/dev/null; then
	echo "Docker image exists: ${DOCKER_TAG}" >&2
	show_tag
	exit 0
fi

echo "Building docker image: ${DOCKER_TAG}" >&2

# Stand-alone helper script.
helper_in="${TOP_DIR}/docker/run-mantle.in"
helper_out="$(pwd)/run-mantle"

gen_script () {
	cat ${helper_in} | sed -e "s/@DOCKER_TAG@/${DOCKER_TAG}/g" > ${helper_out}
	chmod +x ${helper_out}
	echo "Wrote helper: ${helper_out}"
}

if [[ -z ${dry_run} ]]; then
	rm -f ${helper_out}

	if [[ -z ${script} ]]; then
		cd ${TOP_DIR}
		docker build \
			--file ${DOCKER_FILE} \
			--tag ${DOCKER_TAG} \
			.
	fi

	gen_script
fi

show_tag
